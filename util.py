
import os, sys, logging
import hashlib, getpass, codecs

import config, inner_config

def get_post_fix():

    lan = config.OUTPUT_LANGUAGE
    return inner_config.LANGUAGE_CONFIG[lan]["post_fix"]

def get_module_file_name():

    lan = config.OUTPUT_LANGUAGE
    return inner_config.LANGUAGE_CONFIG[lan]["module_file"]

def get_table_name(py_name, sheet_name):

    py_name = py_name.split(os.path.sep)[-1]
    py_name.rstrip()
    if py_name.startswith(config.GEN_FILE_FRONT):
        py_name = py_name[len(config.GEN_FILE_FRONT):]
    if py_name.endswith(get_post_fix()):
        py_name = py_name[:len(get_post_fix())*-1]
    res = "_".join([config.DATA_TBL_FRONT, py_name, sheet_name])
    return res

def get_common_header():

    import time, getpass
    return '\n'.join([
        "# encoding=utf-8",
        "'''This File is generated By xlsGenTools'''",
        "# pylint: disable=C0326, C0103, C0111",
        "",
        "",
        "GEN_TIME=%d" % int(time.time()),
        "GEN_USER=\"%s\"" % str(get_user()),
        "",
        "",
    ])

def get_user():
    encrypt = config.ENCRYPT_USER
    user_name = getpass.getuser()
    if not encrypt:
        return user_name
    return hashlib.sha512(user_name.encode()).hexdigest()

class XlsSyntaxError(Exception):

    def __init__(self, message, errors=None):
        super(XlsSyntaxError, self).__init__(message)
        self.errors = errors

loggers = {}
def create_logger(input_path):
    logger = logging.getLogger(input_path)
    filehandler = logging.FileHandler("xls_gen_log.log", "w")
    logger.addHandler(filehandler)
    logger.setLevel(logging.WARNING)
    return logger

def get_py_major_version():
    return sys.version_info[0]

def open_output_file(output_path):
    import io
    return io.open(output_path, "w", encoding="utf-8")

def write_file(fd, content):
    if get_py_major_version() == 2:
        content = codecs.decode(content, "utf-8")
    fd.write(content)
