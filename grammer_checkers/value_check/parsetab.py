
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'VERTICALBAR EQUAL STRING NUM INTEGER FLOAT TRUE FALSE PYTRUE PYFALSE  value : basetypex\n               | extendtype basetypex : basetype  basetype : bool_val\n                 | float_val\n                 | int_val\n                 | str_val  bool_val : TRUE\n                | FALSE\n                | PYTRUE\n                | PYFALSE  float_val : FLOAT  int_val : INTEGER  str_val : STRING  extendtype : tuple_val\n                   | dict_val  tuple_val : basetype VERTICALBAR\n                  | tuple_val basetype VERTICALBAR dict_val : singlekv VERTICALBAR dict_val\n                 | singlekv  singlekv : basetype EQUAL basetype '
    
_lr_action_items = {'TRUE':([0,5,19,20,22,24,],[12,12,-17,12,12,-18,]),'FALSE':([0,5,19,20,22,24,],[13,13,-17,13,13,-18,]),'PYTRUE':([0,5,19,20,22,24,],[14,14,-17,14,14,-18,]),'PYFALSE':([0,5,19,20,22,24,],[15,15,-17,15,15,-18,]),'FLOAT':([0,5,19,20,22,24,],[16,16,-17,16,16,-18,]),'INTEGER':([0,5,19,20,22,24,],[17,17,-17,17,17,-18,]),'STRING':([0,5,19,20,22,24,],[18,18,-17,18,18,-18,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,23,24,25,],[0,-1,-2,-3,-15,-16,-4,-5,-6,-7,-20,-8,-9,-10,-11,-12,-13,-14,-17,-21,-18,-19,]),'VERTICALBAR':([4,7,8,9,10,11,12,13,14,15,16,17,18,21,23,],[19,-4,-5,-6,-7,22,-8,-9,-10,-11,-12,-13,-14,24,-21,]),'EQUAL':([4,7,8,9,10,12,13,14,15,16,17,18,26,],[20,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,20,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'value':([0,],[1,]),'basetypex':([0,],[2,]),'extendtype':([0,],[3,]),'basetype':([0,5,20,22,],[4,21,23,26,]),'tuple_val':([0,],[5,]),'dict_val':([0,22,],[6,25,]),'bool_val':([0,5,20,22,],[7,7,7,7,]),'float_val':([0,5,20,22,],[8,8,8,8,]),'int_val':([0,5,20,22,],[9,9,9,9,]),'str_val':([0,5,20,22,],[10,10,10,10,]),'singlekv':([0,22,],[11,11,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> value","S'",1,None,None,None),
  ('value -> basetypex','value',1,'p_value','val_check_ly.py',63),
  ('value -> extendtype','value',1,'p_value','val_check_ly.py',64),
  ('basetypex -> basetype','basetypex',1,'p_basetypex','val_check_ly.py',68),
  ('basetype -> bool_val','basetype',1,'p_basetype','val_check_ly.py',72),
  ('basetype -> float_val','basetype',1,'p_basetype','val_check_ly.py',73),
  ('basetype -> int_val','basetype',1,'p_basetype','val_check_ly.py',74),
  ('basetype -> str_val','basetype',1,'p_basetype','val_check_ly.py',75),
  ('bool_val -> TRUE','bool_val',1,'p_bool_val','val_check_ly.py',79),
  ('bool_val -> FALSE','bool_val',1,'p_bool_val','val_check_ly.py',80),
  ('bool_val -> PYTRUE','bool_val',1,'p_bool_val','val_check_ly.py',81),
  ('bool_val -> PYFALSE','bool_val',1,'p_bool_val','val_check_ly.py',82),
  ('float_val -> FLOAT','float_val',1,'p_float_val','val_check_ly.py',86),
  ('int_val -> INTEGER','int_val',1,'p_int_val','val_check_ly.py',90),
  ('str_val -> STRING','str_val',1,'p_str_val','val_check_ly.py',94),
  ('extendtype -> tuple_val','extendtype',1,'p_extendtype','val_check_ly.py',98),
  ('extendtype -> dict_val','extendtype',1,'p_extendtype','val_check_ly.py',99),
  ('tuple_val -> basetype VERTICALBAR','tuple_val',2,'p_tuple_val','val_check_ly.py',106),
  ('tuple_val -> tuple_val basetype VERTICALBAR','tuple_val',3,'p_tuple_val','val_check_ly.py',107),
  ('dict_val -> singlekv VERTICALBAR dict_val','dict_val',3,'p_dict_val','val_check_ly.py',115),
  ('dict_val -> singlekv','dict_val',1,'p_dict_val','val_check_ly.py',116),
  ('singlekv -> basetype EQUAL basetype','singlekv',3,'p_singlekv','val_check_ly.py',124),
]
