
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BOOL BOOLEAN INT LONG ID UID FLOAT DOUBLE STRING STR LIST TUPLE DICT VERTICALBAR EQUALpropertytype : basetypex\n                    | extendtype basetypex : basetype  basetype : bool_type\n                 | int_type\n                 | str_type\n                 | float_type  int_type : INT\n                | LONG\n                | ID\n                | UID  str_type : STR\n                | STRING  bool_type : BOOL\n                  | BOOLEAN  float_type : FLOAT\n                   | DOUBLE  extendtype : LIST VERTICALBAR basetype\n                   | TUPLE VERTICALBAR basetype\n                   | DICT VERTICALBAR basetype EQUAL basetype'
    
_lr_action_items = {'LIST':([0,],[1,]),'TUPLE':([0,],[8,]),'EQUAL':([3,4,6,7,9,10,11,12,14,16,17,18,19,21,27,],[-10,-16,-7,-13,-9,-6,-12,-17,-4,-14,-8,-5,-11,-15,28,]),'DICT':([0,],[15,]),'LONG':([0,22,23,24,28,],[9,9,9,9,9,]),'BOOL':([0,22,23,24,28,],[16,16,16,16,16,]),'ID':([0,22,23,24,28,],[3,3,3,3,3,]),'FLOAT':([0,22,23,24,28,],[4,4,4,4,4,]),'INT':([0,22,23,24,28,],[17,17,17,17,17,]),'STR':([0,22,23,24,28,],[11,11,11,11,11,]),'STRING':([0,22,23,24,28,],[7,7,7,7,7,]),'UID':([0,22,23,24,28,],[19,19,19,19,19,]),'BOOLEAN':([0,22,23,24,28,],[21,21,21,21,21,]),'DOUBLE':([0,22,23,24,28,],[12,12,12,12,12,]),'$end':([2,3,4,5,6,7,9,10,11,12,13,14,16,17,18,19,20,21,25,26,29,],[-2,-10,-16,-3,-7,-13,-9,-6,-12,-17,-1,-4,-14,-8,-5,-11,0,-15,-18,-19,-20,]),'VERTICALBAR':([1,8,15,],[22,23,24,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'basetypex':([0,],[13,]),'bool_type':([0,22,23,24,28,],[14,14,14,14,14,]),'propertytype':([0,],[20,]),'extendtype':([0,],[2,]),'str_type':([0,22,23,24,28,],[10,10,10,10,10,]),'int_type':([0,22,23,24,28,],[18,18,18,18,18,]),'basetype':([0,22,23,24,28,],[5,25,26,27,29,]),'float_type':([0,22,23,24,28,],[6,6,6,6,6,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> propertytype","S'",1,None,None,None),
  ('propertytype -> basetypex','propertytype',1,'p_propertytype','type_check_ly.py',62),
  ('propertytype -> extendtype','propertytype',1,'p_propertytype','type_check_ly.py',63),
  ('basetypex -> basetype','basetypex',1,'p_basetypex','type_check_ly.py',67),
  ('basetype -> bool_type','basetype',1,'p_basetype','type_check_ly.py',71),
  ('basetype -> int_type','basetype',1,'p_basetype','type_check_ly.py',72),
  ('basetype -> str_type','basetype',1,'p_basetype','type_check_ly.py',73),
  ('basetype -> float_type','basetype',1,'p_basetype','type_check_ly.py',74),
  ('int_type -> INT','int_type',1,'p_int_type','type_check_ly.py',78),
  ('int_type -> LONG','int_type',1,'p_int_type','type_check_ly.py',79),
  ('int_type -> ID','int_type',1,'p_int_type','type_check_ly.py',80),
  ('int_type -> UID','int_type',1,'p_int_type','type_check_ly.py',81),
  ('str_type -> STR','str_type',1,'p_str_type','type_check_ly.py',85),
  ('str_type -> STRING','str_type',1,'p_str_type','type_check_ly.py',86),
  ('bool_type -> BOOL','bool_type',1,'p_bool_type','type_check_ly.py',90),
  ('bool_type -> BOOLEAN','bool_type',1,'p_bool_type','type_check_ly.py',91),
  ('float_type -> FLOAT','float_type',1,'p_float_type','type_check_ly.py',95),
  ('float_type -> DOUBLE','float_type',1,'p_float_type','type_check_ly.py',96),
  ('extendtype -> LIST VERTICALBAR basetype','extendtype',3,'p_extendtype','type_check_ly.py',100),
  ('extendtype -> TUPLE VERTICALBAR basetype','extendtype',3,'p_extendtype','type_check_ly.py',101),
  ('extendtype -> DICT VERTICALBAR basetype EQUAL basetype','extendtype',5,'p_extendtype','type_check_ly.py',102),
]
